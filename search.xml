<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker部署与搭建</title>
    <url>/2023/01/06/Docker%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="📬知识点"><a href="#📬知识点" class="headerlink" title="📬知识点"></a><strong>📬</strong>知识点</h1><h2 id="一、什么是Docker"><a href="#一、什么是Docker" class="headerlink" title="一、什么是Docker"></a>一、什么是Docker</h2><p>Docker 最初是 dotCloud 公司创始人 Solomon Hykes 在法国期间发起的一个公司内部项目，它是基于 dotCloud 公司多年云服务技术的一次革新，并于 2013 年 3 月以 Apache 2.0 授权协议开源，主要项目代码在 GitHub 上进行维护。Docker 项目后来还加入了 Linux 基金会，并成立推动 开放容器联盟（OCI）。<br>Docker 使用 Google 公司推出的 Go 语言 进行开发实现，基于 Linux 内核的 cgroup，namespace，以及 AUFS 类的 Union FS 等技术，对进程进行封装隔离，属于 操作系统层面的虚拟化技术。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。最初实现是基于 LXC，从 0.7 版本以后开始去除 LXC，转而使用自行开发的 libcontainer，从 1.11 开始，则进一步演进为使用 runC 和 containerd。</p>
<p>Docker 在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极大的简化了容器的创建和维护。使得 Docker 技术比虚拟机技术更为轻便、快捷。<br>如今，Docker 通过对 Linux 容器技术 LXC（Linux Containers）等进一步优化，提供了各种容器管理工具，通过容器来管理应用，这样便可以达到 “ <strong>Build Once, Works Everywhere</strong> ” 的目的。也就是说对于开发和部署来说，使用 Docker 可以：</p>
<ul>
<li>更快速的交付和部署应用环境。</li>
<li>更高效的资源利用率。</li>
<li>更便捷的迁移和扩展性。</li>
<li>更便捷的应用更新管理。</li>
</ul>
<h2 id="二、Docker的安装与部署"><a href="#二、Docker的安装与部署" class="headerlink" title="二、Docker的安装与部署"></a>二、Docker的安装与部署</h2><h3 id="1-Dcoker安装"><a href="#1-Dcoker安装" class="headerlink" title="1.Dcoker安装"></a>1.Dcoker安装</h3><p>此处一<strong>CentOS</strong>为例，不同的Linux发行版本安装过程有所差异。<br>安装环境：Centos 3.10.0-1160.el7.x86_64</p>
<h3 id="（1）安装命令如下："><a href="#（1）安装命令如下：" class="headerlink" title="（1）安装命令如下："></a>（1）安装命令如下：</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install docker  ==》 安装docker    </span><br><span class="line">service docker start   ==》 启动docker服务</span><br></pre></td></tr></table></figure>
<p><a href="https://cdn.nlark.com/yuque/0/2020/jpeg/677605/1608711081436-ae7f2693-99a6-45a3-aeb8-3d377a9b2762.jpeg#height=215&id=Z7f8d&name=B1270948DC1386F061F9F137A55CAE3C.jpg&originHeight=286&originWidth=729&originalType=binary&ratio=1&rotation=0&showTitle=false&size=114432&status=done&style=stroke&title=&width=547"><img  src="https://cdn.nlark.com/yuque/0/2020/jpeg/677605/1608711081436-ae7f2693-99a6-45a3-aeb8-3d377a9b2762.jpeg#height=215&id=Z7f8d&name=B1270948DC1386F061F9F137A55CAE3C.jpg&originHeight=286&originWidth=729&originalType=binary&ratio=1&rotation=0&showTitle=false&size=114432&status=done&style=stroke&title=&width=547"  ><span class="image-caption">B1270948DC1386F061F9F137A55CAE3C.jpg</span></a></p>
<h3 id="（2）查看版本号"><a href="#（2）查看版本号" class="headerlink" title="（2）查看版本号"></a>（2）查看版本号</h3><p><strong>通过命令</strong>docker version<strong>查看Docker版本号来看是否安装成功：</strong><br><img  src="https://cdn.nlark.com/yuque/0/2020/jpeg/677605/1608714329153-d14b99d9-28ad-44b7-adb1-f1acae707f15.jpeg#height=245&id=UvxCT&name=6ABA7CDD9F9BDF3FCB46EAC173677ADE.jpg&originHeight=327&originWidth=718&originalType=binary&ratio=1&rotation=0&showTitle=false&size=94823&status=done&style=shadow&title=&width=539"  ><span class="image-caption">6ABA7CDD9F9BDF3FCB46EAC173677ADE.jpg</span></p>
<h3 id="（3）镜像加速"><a href="#（3）镜像加速" class="headerlink" title="（3）镜像加速"></a>（3）镜像加速</h3><p>鉴于国内网络问题，后续拉取 Docker 镜像十分缓慢，我们可以需要配置加速器来解决，我使用的是网易的镜像地址：<a href="http://hub-mirror.c.163.com/">http://hub-mirror.c.163.com</a>。<br>新版的 Docker 使用 <strong>&#x2F;etc&#x2F;docker&#x2F;daemon.json</strong>（Linux） 来配置 Daemon。<br>在该配置文件中加入（没有该文件的话，请先建一个）：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 添加至/etc/docker/daemon.json中*/</span></span><br><span class="line"><span class="punctuation">&#123;</span> </span><br><span class="line">	<span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;https://c.163.com/hub#/m/home/&quot;</span><span class="punctuation">]</span>    </span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="（4）hello-world测试"><a href="#（4）hello-world测试" class="headerlink" title="（4）hello-world测试"></a>（4）hello-world测试</h3><p>输入docker run hello-world，首先下载镜像需等待一段时间。当看到<br><img  src="https://cdn.nlark.com/yuque/0/2020/jpeg/677605/1608714261945-f3758f10-64a3-47f0-82a5-f18f16812d5d.jpeg#height=454&id=Vej4L&name=481C409232D115A14FA063259512585F.jpg&originHeight=605&originWidth=734&originalType=binary&ratio=1&rotation=0&showTitle=false&size=254628&status=done&style=stroke&title=&width=551"  ><span class="image-caption">481C409232D115A14FA063259512585F.jpg</span></p>
]]></content>
  </entry>
  <entry>
    <title>Java入门教程</title>
    <url>/2023/03/06/Java%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="Java-Spring-入门指南"><a href="#Java-Spring-入门指南" class="headerlink" title="Java Spring 入门指南"></a>Java Spring 入门指南</h1><p>Java Spring 是一个流行的 Java 开发框架，提供了很多现成的组件和工具，方便开发者快速构建高质量的 Web 应用程序。本文将介绍如何安装、部署和运行 Java Spring，并提供一些示例代码和图片。</p>
<h2 id="安装-Java-Spring"><a href="#安装-Java-Spring" class="headerlink" title="安装 Java Spring"></a>安装 Java Spring</h2><p>安装 Java Spring 需要先安装 Java 开发环境（JDK）。如果你尚未安装 JDK，请先前往 Oracle 官网下载并安装合适的版本。安装完成后，可以按照以下步骤安装 Java Spring：</p>
<ol>
<li>前往 <a href="https://spring.io/">Spring 官网</a> 下载最新的发布版。</li>
<li>解压下载的文件，在本地计算机上创建一个目录用于存放 Spring 相关文件。</li>
<li>设置环境变量 <code>SPRING_HOME</code>，指向上一步中创建的文件夹路径，以便系统能够访问 Spring 组件和工具。</li>
</ol>
<h2 id="部署和运行-Spring-应用"><a href="#部署和运行-Spring-应用" class="headerlink" title="部署和运行 Spring 应用"></a>部署和运行 Spring 应用</h2><p>在安装完 Java Spring 后，就可以开始构建和运行应用程序了。以下是一个简单的 Spring 应用程序示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorldApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(HelloWorldApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述示例代码创建了一个名为 “Hello World” 的 Spring 应用程序。要编译和运行该程序，请按照以下步骤操作：</p>
<ol>
<li>在终端或命令提示符中，进入项目根目录。</li>
<li>执行以下命令编译项目：<code>./mvnw package</code></li>
<li>等待编译完成后，执行以下命令运行项目：<code>java -jar target/hello-world-0.0.1-SNAPSHOT.jar</code></li>
<li>打开浏览器，在地址栏输入 <code>http://localhost:8080</code>，即可看到 “Hello World” 的欢迎页面。</li>
</ol>
<h2 id="使用-Spring-Boot-CLI"><a href="#使用-Spring-Boot-CLI" class="headerlink" title="使用 Spring Boot CLI"></a>使用 Spring Boot CLI</h2><p>除了使用传统的 Maven 或 Gradle 构建工具外，也可以使用 Spring Boot CLI 来快速构建和运行 Spring 应用程序。以下是如何使用 Spring Boot CLI 的示例：</p>
<ol>
<li><p>在终端或命令提示符中，输入以下命令安装 Spring Boot CLI：<code>sdk install springboot</code>。</p>
</li>
<li><p>创建一个名为 “hello.groovy” 的 Groovy 文件，内容如下：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">&quot;/&quot;</span>)</span><br><span class="line">    String hello() &#123;</span><br><span class="line">        <span class="string">&quot;Hello World!&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在终端或命令提示符中，输入以下命令运行应用程序：<code>spring run hello.groovy</code>。</p>
</li>
<li><p>打开浏览器，在地址栏输入 <code>http://localhost:8080</code>，即可看到 “Hello World!” 的欢迎消息。</p>
</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文介绍了如何安装、部署和运行 Java Spring 框架，包括使用传统的 Maven 或 Gradle 构建工具和使用 Spring Boot CLI 的方法。通过这些示例，希望能够帮助读者快速入门 Java Spring 并开始开发自己的应用程序。</p>
]]></content>
  </entry>
  <entry>
    <title>浅述java中的匿名类Anonymous Class转换为Lambda</title>
    <url>/2023/03/19/%E6%B5%85%E8%BF%B0java%E4%B8%AD%E7%9A%84%E5%8C%BF%E5%90%8D%E7%B1%BBAnonymousClass%E8%BD%AC%E6%8D%A2%E4%B8%BALambda/</url>
    <content><![CDATA[<h2 id="匿名类Anonymous-Class"><a href="#匿名类Anonymous-Class" class="headerlink" title="匿名类Anonymous Class"></a>匿名类Anonymous Class</h2><p>在Java中，匿名类是一种特殊的内部类，它没有明确的类名，通常用于创建只需要使用一次的类的实例。匿名类通常是在创建父类或接口的实例时使用，可以用作参数传递，也可以用作返回值。</p>
<p>匿名类的语法格式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> 父类构造器(参数列表) &#123;</span><br><span class="line">    <span class="comment">// 匿名类的类体部分</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个语法格式中，”父类构造器”是指要创建的父类的构造器，”参数列表”是该构造器的参数列表。在匿名类的类体部分，可以定义成员变量、方法、内部类等内容。</p>
<p>匿名类的特点包括：</p>
<ol>
<li>没有明确的类名，通常使用父类或接口的名字作为类名；</li>
<li>可以继承父类或实现接口，也可以同时继承父类并实现接口；</li>
<li>可以定义成员变量、方法、内部类等，但不能定义静态成员变量或静态方法；</li>
<li>匿名类中的代码块可以使用外部类的成员变量和方法，但是需要将这些成员变量和方法声明为final或者effectively final的变量；</li>
<li>匿名类的实例只能使用一次，无法重复使用。</li>
</ol>
<p>通常情况下，使用Lambda表达式可以替换匿名类的使用，Lambda表达式更加简洁和易读，而且在Java 8及以上版本中支持对函数式接口的直接实现。</p>
<h2 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h2><p>在Java 8中，引入了一种新的语法特性——Lambda表达式。Lambda表达式是一种匿名函数，它可以像对象一样传递，可以作为函数式接口的实例使用，可以简化代码，并提高代码的可读性和可维护性。</p>
<p>Lambda表达式的语法格式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">(parameters) -&gt; expression</span><br><span class="line">(parameters) -&gt; &#123; statements; &#125;</span><br></pre></td></tr></table></figure>

<p>其中，”parameters”是参数列表，可以为空，也可以包含一个或多个参数；”expression”是一个表达式，可以是常量、变量、方法调用等，也可以是一个Lambda表达式；”statements”是一个代码块，可以包含多条语句。</p>
<p>Lambda表达式的特点包括：</p>
<ol>
<li>可以替代匿名内部类，简化代码；</li>
<li>可以作为函数式接口的实例使用，方便函数式编程；</li>
<li>可以通过方法引用的方式简化Lambda表达式；</li>
<li>可以实现闭包，即可以访问外部变量；</li>
<li>可以使用Java 8中新增的Stream API和并发API，提高代码的性能和可读性。</li>
</ol>
<p>需要注意的是，Lambda表达式只能用于函数式接口，即只有一个抽象方法的接口。在Lambda表达式中，参数类型可以省略，由编译器自动推断，但是参数个数和顺序必须与接口中的抽象方法一致。</p>
<h2 id="匿名类Anonymous-Class转为Lambda"><a href="#匿名类Anonymous-Class转为Lambda" class="headerlink" title="匿名类Anonymous Class转为Lambda"></a>匿名类Anonymous Class转为Lambda</h2><p>将匿名类转换为Lambda表达式有一些条件和限制。在满足以下条件时，可以将匿名类转换为Lambda表达式：</p>
<ol>
<li><p>函数式接口：要将匿名类转换为Lambda表达式，匿名类必须实现一个函数式接口。函数式接口是只有一个抽象方法的接口。这是因为Lambda表达式仅能表示单个方法实现。</p>
</li>
<li><p>无额外字段或方法：匿名类不能有任何额外的字段或方法（除了函数式接口所需的单个抽象方法的实现）。Lambda表达式不能包含字段或额外方法。</p>
</li>
<li><p>无构造函数：由于Lambda表达式没有构造函数，匿名类也不能有构造函数。</p>
</li>
<li><p>无实例初始化块：Lambda表达式不能包含实例初始化块（即使用{ }定义的代码块），因此匿名类也不能有实例初始化块。</p>
</li>
<li><p>无继承限制：Lambda表达式不能继承任何类，因此匿名类不能扩展其他类。匿名类只能实现一个函数式接口。</p>
</li>
<li><p>受限访问外部变量：匿名类可以访问外部变量，但Lambda表达式对访问外部变量有一定限制。Lambda表达式只能捕获封闭作用域中声明为final或实际上是final（即不会被修改）的变量。</p>
</li>
</ol>
<p>如果匿名类满足上述条件，可以将其转换为Lambda表达式。需要注意的是，虽然在某些情况下可以将匿名类转换为Lambda表达式，但它们在语义上并不总是等价的，尤其是在涉及this引用或同步方法时。</p>
<p>以下是一个简单的例子，说明如何将匿名类转换为Lambda表达式。我们将使用一个函数式接口Greeting，它有一个名为sayHello的抽象方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个函数式接口</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Greeting</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用匿名类实现Greeting接口</span></span><br><span class="line">        <span class="type">Greeting</span> <span class="variable">anonymousGreeting</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Greeting</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">(String name)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Hello, &quot;</span> + name + <span class="string">&quot; (from anonymous class)!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        anonymousGreeting.sayHello(<span class="string">&quot;Alice&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将匿名类转换为Lambda表达式</span></span><br><span class="line">        <span class="type">Greeting</span> <span class="variable">lambdaGreeting</span> <span class="operator">=</span> (name) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hello, &quot;</span> + name + <span class="string">&quot; (from lambda)!&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        lambdaGreeting.sayHello(<span class="string">&quot;Bob&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这个例子中，我们首先使用匿名类实现了Greeting接口。然后，我们将这个匿名类转换为等效的Lambda表达式。这个转换是可能的，因为我们的匿名类满足了前面提到的条件：它实现了一个函数式接口，且没有额外的字段、方法、构造函数或实例初始化块。</p>
<p>运行此示例将产生以下输出：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Hello, Alice (<span class="keyword">from</span> anonymous <span class="keyword">class</span>)!</span><br><span class="line">Hello, Bob (<span class="keyword">from</span> <span class="keyword">lambda</span>)!</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Java的嵌套类与内部类</title>
    <url>/2023/03/21/Java%E7%9A%84%E5%B5%8C%E5%A5%97%E7%B1%BB%E4%B8%8E%E5%86%85%E9%83%A8%E7%B1%BB/</url>
    <content><![CDATA[<p>在 Java 中，根据类的定义位置和特性，可以将类分为四种类型：顶层类、嵌套类、内部类和静态嵌套类。</p>
<p>其中嵌套类和内部类也是非常常见，但是在方法或者变量的使用时会让人糊涂。下面详细看看他们的使用。</p>
<h2 id="嵌套类（Nested-Class）"><a href="#嵌套类（Nested-Class）" class="headerlink" title="嵌套类（Nested Class）"></a>嵌套类（Nested Class）</h2><p>首先，嵌套类（Nested Class）包含静态嵌套类（Static Nested Class）和非静态嵌套类（Non-static Nested Class，又称为内部类Inner Class）。<br><img  src="https://s3.bmp.ovh/imgs/2023/03/21/e8dd1facfdfb8039.png"  ><span class="image-caption">Nested Class</span></p>
<h3 id="静态嵌套类（Static-Nested-Class）"><a href="#静态嵌套类（Static-Nested-Class）" class="headerlink" title="静态嵌套类（Static Nested Class）"></a>静态嵌套类（Static Nested Class）</h3><p>静态嵌套类使用 static 修饰符定义，它可以独立存在，而不依赖于外部类的实例。静态嵌套类不能访问外部类的非静态成员，但可以访问外部类的静态成员。创建静态嵌套类的实例不需要外部类的实例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OuterClass</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">staticVariable</span> <span class="operator">=</span> <span class="string">&quot;Static Variable&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">nonStaticVariable</span> <span class="operator">=</span> <span class="string">&quot;Non-static Variable&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">StaticNestedClass</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(staticVariable); <span class="comment">// 可以访问静态变量</span></span><br><span class="line">            <span class="comment">// System.out.println(nonStaticVariable); // 无法访问非静态变量</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="非静态嵌套类（Non-static-Nested-Class）又称内部类（Inner-Class）"><a href="#非静态嵌套类（Non-static-Nested-Class）又称内部类（Inner-Class）" class="headerlink" title="非静态嵌套类（Non-static Nested Class）又称内部类（Inner Class）"></a>非静态嵌套类（Non-static Nested Class）又称内部类（Inner Class）</h3><p>内部类是非静态的嵌套类，它与外部类有一个紧密的关联，并且可以访问外部类的所有成员（包括私有成员）。内部类的实例总是与外部类的实例相关联。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OuterClass</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">staticVariable</span> <span class="operator">=</span> <span class="string">&quot;Static Variable&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">nonStaticVariable</span> <span class="operator">=</span> <span class="string">&quot;Non-static Variable&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">InnerClass</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(staticVariable); <span class="comment">// 可以访问静态变量</span></span><br><span class="line">            System.out.println(nonStaticVariable); <span class="comment">// 可以访问非静态变量</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="成员内部类和局部内部类"><a href="#成员内部类和局部内部类" class="headerlink" title="成员内部类和局部内部类"></a>成员内部类和局部内部类</h3><p>成员内部类: 定义在外部类的成员位置。<br>局部内部类: 定义在外部类的局部位置，也就是外部类中的方法内部。</p>
<h2 id="嵌套类与外部类的数据访问"><a href="#嵌套类与外部类的数据访问" class="headerlink" title="嵌套类与外部类的数据访问"></a>嵌套类与外部类的数据访问</h2><h3 id="外部类访问嵌套类"><a href="#外部类访问嵌套类" class="headerlink" title="外部类访问嵌套类"></a>外部类访问嵌套类</h3><ol>
<li>嵌套类是Static的<br>因为Static的是类属性，无需创建实例，所以可以直接通过类名访问。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 若是在OuterClass中，可去掉OuterClassName</span></span><br><span class="line">OuterClassName.NestedClassName.methodName()</span><br><span class="line">OuterClassName.NestedClassName.variable <span class="comment">// 变量的访问</span></span><br></pre></td></tr></table></figure></li>
<li>嵌套类不是是Static的<br>此时类是实例属性，需要创建实例。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">OuterClass</span> <span class="variable">outerObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OuterClass</span>();</span><br><span class="line">OuterClass.<span class="type">InnerClass</span> <span class="variable">innerObj</span> <span class="operator">=</span> outerObj.<span class="keyword">new</span> <span class="title class_">InnerClass</span>();</span><br><span class="line">outerObj.variable  <span class="comment">// 变量的访问</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="嵌套类访问外部类"><a href="#嵌套类访问外部类" class="headerlink" title="嵌套类访问外部类"></a>嵌套类访问外部类</h3><ol>
<li>静态嵌套类<br>静态嵌套类可以访问外部类的静态成员，但不能直接访问非静态成员。要访问非静态成员，需要通过外部类的实例。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">staticVariable  <span class="comment">// 外部的静态成员直接访问</span></span><br><span class="line"></span><br><span class="line"><span class="type">OuterClass</span> <span class="variable">outerInstance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OuterClass</span>();</span><br><span class="line">outerInstance.<span class="built_in">this</span>.nonStaticVariable  <span class="comment">// 外部的非静态成员须通过外部实例</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>非静态嵌套类（内部类）<br>内部类可以直接访问外部类的所有成员（包括静态和非静态成员），不需要外部类的实例。</li>
</ol>
]]></content>
  </entry>
</search>
